Index: src/main/java/application/security/UserRole.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/UserRole.java	(revision )
+++ src/main/java/application/security/UserRole.java	(revision )
@@ -0,0 +1,24 @@
+package application.security;
+
+import application.model.User;
+
+public enum UserRole {
+	USER, ADMIN;
+
+	public UserAuthority asAuthorityFor(final User user) {
+		final UserAuthority authority = new UserAuthority();
+		authority.setAuthority("ROLE_" + toString());
+		authority.setUserId(user.getId().toString());
+		return authority;
+	}
+
+	public static UserRole valueOf(final UserAuthority authority) {
+		switch (authority.getAuthority()) {
+		case "ROLE_USER":
+			return USER;
+		case "ROLE_ADMIN":
+			return ADMIN;
+		}
+		throw new IllegalArgumentException("No role defined for authority: " + authority.getAuthority());
+	}
+}
Index: src/main/java/application/security/UserAuthentication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/UserAuthentication.java	(revision )
+++ src/main/java/application/security/UserAuthentication.java	(revision )
@@ -0,0 +1,52 @@
+package application.security;
+
+import application.model.User;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+
+import java.util.Collection;
+
+public class UserAuthentication implements Authentication {
+
+	private final User user;
+	private boolean authenticated = true;
+
+	public UserAuthentication(User user) {
+		this.user = user;
+	}
+
+	@Override
+	public String getName() {
+		return user.getFirstName();
+	}
+
+	@Override
+	public Collection<? extends GrantedAuthority> getAuthorities() {
+		return null;
+	}
+
+	@Override
+	public Object getCredentials() {
+		return user.getPassword();
+	}
+
+	@Override
+	public User getDetails() {
+		return user;
+	}
+
+	@Override
+	public Object getPrincipal() {
+		return user.getFirstName();
+	}
+
+	@Override
+	public boolean isAuthenticated() {
+		return authenticated;
+	}
+
+	@Override
+	public void setAuthenticated(boolean authenticated) {
+		this.authenticated = authenticated;
+	}
+}
Index: src/main/java/application/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/model/User.java	(revision 7ac6d925003455a2a50808b5f2856ad010756363)
+++ src/main/java/application/model/User.java	(revision )
@@ -4,14 +4,20 @@
  * Created by matan on 09/05/2016.
  */
 
+import application.security.UserAuthority;
+import application.security.UserRole;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.springframework.data.mongodb.core.index.Indexed;
 import org.springframework.data.mongodb.core.mapping.Document;
+import org.springframework.security.core.userdetails.UserDetails;
 
 import javax.validation.constraints.NotNull;
+import java.util.EnumSet;
+import java.util.HashSet;
+import java.util.Set;
 
 @Document
-public class User extends PersistedObject {
+public class User extends PersistedObject implements UserDetails {
 
     private String firstName;
 
@@ -23,6 +29,10 @@
     @NotNull
     private String phoneNumber;
 
+    @JsonIgnore
+    @NotNull
+    private String password;
+
     private String avatarURL;
 
     @JsonIgnore
@@ -30,6 +40,8 @@
 
     private Boolean needsEdit;
 
+    private Set<UserAuthority> authorities;
+
     public User() {
     }
 
@@ -82,6 +94,10 @@
         this.phoneNumber = phoneNumber;
     }
 
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
     public String getAvatarURL() {
         return avatarURL;
     }
@@ -107,4 +123,82 @@
     public void setNeedsEdit(Boolean needsEdit) {
         this.needsEdit = needsEdit;
     }
+
+    @Override
+    public String getPassword() {
+        return "b";
+    }
+
+    @Override
+    public String getUsername() {
+        return this.getPhoneNumber();
+    }
+
+    @Override
+    public boolean isAccountNonExpired() {
+        return false;
+    }
+
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+    public long getExpires() {
+        return 1000;
+    }
+
+    public void setExpires(long expires) {
+        ;
+    }
+
+    @Override
+    public Set<UserAuthority> getAuthorities() {
+        return authorities;
+    }
+
+    // Use Roles as external API
+    public Set<UserRole> getRoles() {
+        Set<UserRole> roles = EnumSet.noneOf(UserRole.class);
+        if (authorities != null) {
+            for (UserAuthority authority : authorities) {
+                roles.add(UserRole.valueOf(authority));
+            }
+        }
+        return roles;
+    }
+
+    public void setRoles(Set<UserRole> roles) {
+        for (UserRole role : roles) {
+            grantRole(role);
+        }
+    }
+
+    public void grantRole(UserRole role) {
+        if (authorities == null) {
+            authorities = new HashSet<UserAuthority>();
+        }
+        authorities.add(role.asAuthorityFor(this));
+    }
+
+    public void revokeRole(UserRole role) {
+        if (authorities != null) {
+            authorities.remove(role.asAuthorityFor(this));
+        }
+    }
+
+    public boolean hasRole(UserRole role) {
+        return authorities.contains(role.asAuthorityFor(this));
+    }
+
 }
Index: src/main/java/application/Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/Application.java	(revision 7ac6d925003455a2a50808b5f2856ad010756363)
+++ src/main/java/application/Application.java	(revision )
@@ -6,7 +6,11 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.web.filter.CharacterEncodingFilter;
 
+import javax.servlet.Filter;
+
 @SpringBootApplication
 public class Application {
 //    @Bean
@@ -41,5 +45,13 @@
 
     public static void main(String[] args) {
         SpringApplication.run(Application.class, args);
+    }
+
+    @Bean
+    public Filter characterEncodingFilter() {
+        CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();
+        characterEncodingFilter.setEncoding("UTF-8");
+        characterEncodingFilter.setForceEncoding(true);
+        return characterEncodingFilter;
     }
 }
Index: src/main/java/application/security/UserAuthority.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/UserAuthority.java	(revision )
+++ src/main/java/application/security/UserAuthority.java	(revision )
@@ -0,0 +1,57 @@
+package application.security;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import org.springframework.data.mongodb.core.mapping.Document;
+import org.springframework.security.core.GrantedAuthority;
+
+import javax.persistence.Id;
+import javax.validation.constraints.NotNull;
+
+@Document
+public class UserAuthority implements GrantedAuthority {
+
+	@NotNull
+	@JsonIgnore
+	@Id
+	private String userId;
+
+	@NotNull
+	@Id
+	private String authority;
+
+	public String getUserId() {
+		return userId;
+	}
+
+	public void setUserId(String userId) {
+		this.userId = userId;
+	}
+
+	@Override
+	public String getAuthority() {
+		return authority;
+	}
+
+	public void setAuthority(String authority) {
+		this.authority = authority;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (!(obj instanceof UserAuthority))
+			return false;
+
+		UserAuthority ua = (UserAuthority) obj;
+		return ua.getAuthority() == this.getAuthority() || ua.getAuthority().equals(this.getAuthority());
+	}
+
+	@Override
+	public int hashCode() {
+		return getAuthority() == null ? 0 : getAuthority().hashCode();
+	}
+
+	@Override
+	public String toString() {
+		return getClass().getSimpleName() + ": " + getAuthority();
+	}
+}
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 7ac6d925003455a2a50808b5f2856ad010756363)
+++ build.gradle	(revision )
@@ -32,8 +32,15 @@
     compile("org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE")
     compile("org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE")
     compile("org.springframework.boot:spring-boot-starter-data-jpa:1.3.4.RELEASE")
-    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
+    compile("org.springframework.boot:spring-boot-starter-data-mongodb:1.3.3.RELEASE")
     compile("com.h2database:h2:1.4.191")
+
+    compile('org.springframework.boot:spring-boot-autoconfigure:1.3.3.RELEASE')
+    compile('org.springframework.boot:spring-boot-starter-security:1.3.3.RELEASE')
+
+    compile('org.springframework.security:spring-security-config:4.0.4.RELEASE')
+    compile('org.springframework.security:spring-security-core:4.0.4.RELEASE')
+
 
     //Jersey
     compile("com.sun.jersey:jersey-client:1.19.1")
Index: src/main/java/application/security/TokenAuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/TokenAuthenticationService.java	(revision )
+++ src/main/java/application/security/TokenAuthenticationService.java	(revision )
@@ -0,0 +1,46 @@
+package application.security;
+
+import application.model.User;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.security.core.Authentication;
+import org.springframework.stereotype.Service;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.xml.bind.DatatypeConverter;
+
+@Service
+public class TokenAuthenticationService {
+
+	private static final String AUTH_HEADER_NAME = "X-AUTH-TOKEN";
+	private static final long TEN_DAYS = 1000 * 60 * 60 * 24 * 10;
+
+	private final TokenHandler tokenHandler;
+
+	@Autowired
+	private Authenticator authenticator;
+
+	@Autowired
+	public TokenAuthenticationService(@Value("${token.secret}") String secret) {
+		tokenHandler = new TokenHandler(DatatypeConverter.parseBase64Binary(secret));
+	}
+
+	public void addAuthentication(HttpServletResponse response, UserAuthentication authentication) {
+		final User user = authentication.getDetails();
+		user.setExpires(System.currentTimeMillis() + TEN_DAYS);
+		response.addHeader(AUTH_HEADER_NAME, tokenHandler.createTokenForUser(user));
+	}
+
+	public Authentication getAuthentication(HttpServletRequest request) {
+		final String token = request.getHeader(AUTH_HEADER_NAME);
+		if (token != null) {
+//			final User user = tokenHandler.parseUserFromToken(token);
+			User user = authenticator.verifyAuthentication(token);
+			if (user != null) {
+				return new UserAuthentication(user);
+			}
+		}
+		return null;
+	}
+}
Index: src/main/java/application/repositories/user/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/repositories/user/UserRepository.java	(revision 7ac6d925003455a2a50808b5f2856ad010756363)
+++ src/main/java/application/repositories/user/UserRepository.java	(revision )
@@ -1,0 +1,0 @@
Index: gift-service-core.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gift-service-core.iml	(revision 7ac6d925003455a2a50808b5f2856ad010756363)
+++ gift-service-core.iml	(revision )
@@ -43,7 +43,6 @@
     <orderEntry type="library" name="Gradle: org.springframework:spring-web:4.2.6.RELEASE" level="project" />
     <orderEntry type="library" name="Gradle: org.springframework:spring-webmvc:4.2.6.RELEASE" level="project" />
     <orderEntry type="library" name="Gradle: org.springframework.boot:spring-boot:1.3.4.RELEASE" level="project" />
-    <orderEntry type="library" name="Gradle: org.springframework.boot:spring-boot-autoconfigure:1.3.4.RELEASE" level="project" />
     <orderEntry type="library" name="Gradle: org.springframework.boot:spring-boot-starter-logging:1.3.4.RELEASE" level="project" />
     <orderEntry type="library" name="Gradle: org.yaml:snakeyaml:1.16" level="project" />
     <orderEntry type="library" name="Gradle: org.apache.tomcat.embed:tomcat-embed-core:8.0.33" level="project" />
@@ -79,7 +78,6 @@
     <orderEntry type="library" name="Gradle: org.jboss:jandex:1.1.0.Final" level="project" />
     <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.0.b2" level="project" />
     <orderEntry type="library" name="Gradle: org.springframework.data:spring-data-jpa:1.9.4.RELEASE" level="project" />
-    <orderEntry type="library" name="Gradle: org.springframework.boot:spring-boot-starter-data-mongodb:1.3.4.RELEASE" level="project" />
     <orderEntry type="library" name="Gradle: org.mongodb:mongo-java-driver:2.13.3" level="project" />
     <orderEntry type="library" name="Gradle: org.springframework.data:spring-data-mongodb:1.8.4.RELEASE" level="project" />
     <orderEntry type="library" name="Gradle: com.h2database:h2:1.4.191" level="project" />
@@ -110,5 +108,11 @@
     <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.9" level="project" />
     <orderEntry type="library" name="Gradle: junit:junit:4.12" level="project" />
     <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
+    <orderEntry type="library" name="Gradle: org.springframework.security:spring-security-config:4.0.4.RELEASE" level="project" />
+    <orderEntry type="library" name="Gradle: org.springframework.security:spring-security-web:4.0.4.RELEASE" level="project" />
+    <orderEntry type="library" name="Gradle: org.springframework.security:spring-security-core:4.0.4.RELEASE" level="project" />
+    <orderEntry type="library" name="Gradle: org.springframework.boot:spring-boot-autoconfigure:1.3.3.RELEASE" level="project" />
+    <orderEntry type="library" name="Gradle: org.springframework.boot:spring-boot-starter-security:1.3.3.RELEASE" level="project" />
+    <orderEntry type="library" name="Gradle: org.springframework.boot:spring-boot-starter-data-mongodb:1.3.3.RELEASE" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/main/java/application/security/StatelessAuthenticationFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/StatelessAuthenticationFilter.java	(revision )
+++ src/main/java/application/security/StatelessAuthenticationFilter.java	(revision )
@@ -0,0 +1,28 @@
+package application.security;
+
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.filter.GenericFilterBean;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import java.io.IOException;
+
+class StatelessAuthenticationFilter extends GenericFilterBean {
+
+	private final TokenAuthenticationService tokenAuthenticationService;
+
+	protected StatelessAuthenticationFilter(TokenAuthenticationService taService) {
+		this.tokenAuthenticationService = taService;
+	}
+
+	@Override
+	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,
+			ServletException {
+		SecurityContextHolder.getContext().setAuthentication(
+				tokenAuthenticationService.getAuthentication((HttpServletRequest) req));
+		chain.doFilter(req, res); // always continue
+	}
+}
\ No newline at end of file
Index: src/main/java/application/security/StatelessLoginFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/StatelessLoginFilter.java	(revision )
+++ src/main/java/application/security/StatelessLoginFilter.java	(revision )
@@ -0,0 +1,56 @@
+package application.security;
+
+import application.model.User;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+class StatelessLoginFilter extends AbstractAuthenticationProcessingFilter {
+
+	private final TokenAuthenticationService tokenAuthenticationService;
+	private final UserDetailsService userDetailsService;
+
+	protected StatelessLoginFilter(String urlMapping, TokenAuthenticationService tokenAuthenticationService,
+								   UserDetailsService userDetailsService, AuthenticationManager authManager) {
+		super(new AntPathRequestMatcher(urlMapping));
+		this.userDetailsService = userDetailsService;
+		this.tokenAuthenticationService = tokenAuthenticationService;
+		setAuthenticationManager(authManager);
+	}
+
+	@Override
+	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
+			throws AuthenticationException, IOException, ServletException {
+
+		final User user = new ObjectMapper().readValue(request.getInputStream(), User.class);
+		final UsernamePasswordAuthenticationToken loginToken = new UsernamePasswordAuthenticationToken(
+				user.getUsername(), user.getPassword());
+		return getAuthenticationManager().authenticate(loginToken);
+	}
+
+	@Override
+	protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,
+											FilterChain chain, Authentication authentication) throws IOException, ServletException {
+
+		// Lookup the complete User object from the database and create an Authentication for it
+		final User authenticatedUser = userDetailsService.loadUserByUsername(authentication.getName());
+		final UserAuthentication userAuthentication = new UserAuthentication(authenticatedUser);
+
+		// Add the custom token as HTTP header to the response
+		tokenAuthenticationService.addAuthentication(response, userAuthentication);
+
+		// Add the authentication to the Security context
+		SecurityContextHolder.getContext().setAuthentication(userAuthentication);
+	}
+}
\ No newline at end of file
Index: src/main/java/application/outbound/sms/SmsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/outbound/sms/SmsService.java	(revision 7ac6d925003455a2a50808b5f2856ad010756363)
+++ src/main/java/application/outbound/sms/SmsService.java	(revision )
@@ -1,5 +1,6 @@
 package application.outbound.sms;
 
+import application.configuration.PropertiesConfiguration;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -19,7 +20,15 @@
     @Autowired
     private TwilioClient twilioClient;
 
+    @Autowired
+    PropertiesConfiguration propertiesConfiguration;
+
     public void sendVerificationSMS(String toNumber, int verificationCode) {
+        if (propertiesConfiguration.getSmsDisabled()) {
+            log.log(Level.INFO, "Skipping SMS sending , SMS service is disabled");
+            return;
+        }
+
         String text = "Welcome to Gift App, your verification code is: " + verificationCode;
 
         twilioClient.sendSMS(toNumber,text);
Index: src/main/java/application/restControllers/AuthorizedControllerBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/restControllers/AuthorizedControllerBase.java	(revision 7ac6d925003455a2a50808b5f2856ad010756363)
+++ src/main/java/application/restControllers/AuthorizedControllerBase.java	(revision )
@@ -1,7 +1,6 @@
 package application.restControllers;
 
 import application.model.User;
-import application.restControllers.exceptions.UnauthorizedUserException;
 import application.security.Authenticator;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
@@ -20,11 +19,12 @@
 
     @ModelAttribute("currentUser")
     public User authenticateUser(@RequestHeader(value="api_key") String accessToken) {
-        User user = authenticator.verifyAuthentication(accessToken);
-        if (user == null) {
-            throw new UnauthorizedUserException();
-        }
-        return user;
+//        User user = authenticator.verifyAuthentication(accessToken);
+//        if (user == null) {
+//            throw new UnauthorizedUserException();
+//        }
+//        return user;
+        return null;
     }
 
 }
Index: src/main/java/application/security/TokenHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/TokenHandler.java	(revision )
+++ src/main/java/application/security/TokenHandler.java	(revision )
@@ -0,0 +1,113 @@
+package application.security;
+
+import application.model.User;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import javax.xml.bind.DatatypeConverter;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
+import java.util.Date;
+
+public final class TokenHandler {
+
+	private static final String HMAC_ALGO = "HmacSHA256";
+	private static final String SEPARATOR = ".";
+	private static final String SEPARATOR_SPLITTER = "\\.";
+
+	private final Mac hmac;
+
+	public TokenHandler(byte[] secretKey) {
+		try {
+			hmac = Mac.getInstance(HMAC_ALGO);
+			hmac.init(new SecretKeySpec(secretKey, HMAC_ALGO));
+		} catch (NoSuchAlgorithmException | InvalidKeyException e) {
+			throw new IllegalStateException("failed to initialize HMAC: " + e.getMessage(), e);
+		}
+	}
+
+	public User parseUserFromToken(String token) {
+		final String[] parts = token.split(SEPARATOR_SPLITTER);
+		if (parts.length == 2 && parts[0].length() > 0 && parts[1].length() > 0) {
+			try {
+				final byte[] userBytes = fromBase64(parts[0]);
+				final byte[] hash = fromBase64(parts[1]);
+
+				boolean validHash = Arrays.equals(createHmac(userBytes), hash);
+				if (validHash) {
+					final User user = fromJSON(userBytes);
+					if (new Date().getTime() < user.getExpires()) {
+						return user;
+					}
+				}
+			} catch (IllegalArgumentException e) {
+				//log tempering attempt here
+			}
+		}
+		return null;
+	}
+
+	public String createTokenForUser(User user) {
+		byte[] userBytes = toJSON(user);
+		byte[] hash = createHmac(userBytes);
+		final StringBuilder sb = new StringBuilder(170);
+		sb.append(toBase64(userBytes));
+		sb.append(SEPARATOR);
+		sb.append(toBase64(hash));
+		return sb.toString();
+	}
+
+	private User fromJSON(final byte[] userBytes) {
+		try {
+			return new ObjectMapper().readValue(new ByteArrayInputStream(userBytes), User.class);
+		} catch (IOException e) {
+			throw new IllegalStateException(e);
+		}
+	}
+
+	private byte[] toJSON(User user) {
+		try {
+			return new ObjectMapper().writeValueAsBytes(user);
+		} catch (JsonProcessingException e) {
+			throw new IllegalStateException(e);
+		}
+	}
+
+	private String toBase64(byte[] content) {
+		return DatatypeConverter.printBase64Binary(content);
+	}
+
+	private byte[] fromBase64(String content) {
+		return DatatypeConverter.parseBase64Binary(content);
+	}
+
+	// synchronized to guard internal hmac object
+	private synchronized byte[] createHmac(byte[] content) {
+		return hmac.doFinal(content);
+	}
+/*
+	public static void main(String[] args) {
+		Date start = new Date();
+		byte[] secret = new byte[70];
+		new java.security.SecureRandom().nextBytes(secret);
+
+		TokenHandler tokenHandler = new TokenHandler(secret);
+		for (int i = 0; i < 1000; i++) {
+			final User user = new User(java.util.UUID.randomUUID().toString().substring(0, 8), new Date(
+					new Date().getTime() + 10000));
+			user.grantRole(UserRole.ADMIN);
+			final String token = tokenHandler.createTokenForUser(user);
+			final User parsedUser = tokenHandler.parseUserFromToken(token);
+			if (parsedUser == null || parsedUser.getUsername() == null) {
+				System.out.println("error");
+			}
+		}
+		System.out.println(System.currentTimeMillis() - start.getTime());
+	}
+*/
+}
Index: src/main/java/application/security/UserDetailsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/UserDetailsService.java	(revision )
+++ src/main/java/application/security/UserDetailsService.java	(revision )
@@ -0,0 +1,29 @@
+package application.security;
+
+import application.model.User;
+import application.repositories.user.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.security.authentication.AccountStatusUserDetailsChecker;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {
+
+	@Autowired
+	@Qualifier("userRepository")
+	private UserRepository userRepository;
+
+	private final AccountStatusUserDetailsChecker detailsChecker = new AccountStatusUserDetailsChecker();
+
+	@Override
+	public final User loadUserByUsername(String username) throws UsernameNotFoundException {
+		final User user = userRepository.findByFirstName(username).get();
+		if (user == null) {
+			throw new UsernameNotFoundException("user not found");
+		}
+		detailsChecker.check(user);
+		return user;
+	}
+}
Index: src/main/java/application/security/StatelessAuthenticationSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/application/security/StatelessAuthenticationSecurityConfig.java	(revision )
+++ src/main/java/application/security/StatelessAuthenticationSecurityConfig.java	(revision )
@@ -0,0 +1,86 @@
+package application.security;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.annotation.Order;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+
+@EnableWebSecurity
+@Configuration
+@Order(1)
+public class StatelessAuthenticationSecurityConfig extends WebSecurityConfigurerAdapter {
+
+	@Autowired
+	private UserDetailsService userDetailsService;
+
+	@Autowired
+	private TokenAuthenticationService tokenAuthenticationService;
+
+	public StatelessAuthenticationSecurityConfig() {
+		super(true);
+	}
+
+	@Override
+	protected void configure(HttpSecurity http) throws Exception {
+		http
+				.exceptionHandling().and()
+				.anonymous().and()
+				.servletApi().and()
+				.headers().cacheControl().and().and()
+				.authorizeRequests()
+
+				//allow anonymous resource requests
+				.antMatchers("/").permitAll()
+				.antMatchers("/favicon.ico").permitAll()
+				.antMatchers("/resources/**").permitAll()
+
+				.antMatchers("/swagger-ui.html").permitAll()
+				.antMatchers("/webjars/springfox-swagger-ui/**").permitAll()
+				.antMatchers("/configuration/ui/**").permitAll()
+				.antMatchers("/swagger-resources/**").permitAll()
+				.antMatchers("/v2/api-docs/**").permitAll()
+				.antMatchers("/configuration/security/**").permitAll()
+
+				//allow anonymous POSTs to login
+				.antMatchers(HttpMethod.POST, "/api/login").permitAll()
+
+				//allow anonymous GETs to API
+				.antMatchers(HttpMethod.GET, "/api/**").permitAll()
+
+				//defined Admin only API area
+				.antMatchers("/admin/**").hasRole("ADMIN")
+
+				//all other request need to be authenticated
+				.anyRequest().hasRole("USER").and()
+
+				// custom JSON based authentication by POST of {"username":"<name>","password":"<password>"} which sets the token header upon authentication
+				.addFilterBefore(new StatelessLoginFilter("/api/login", tokenAuthenticationService, userDetailsService, authenticationManager()), UsernamePasswordAuthenticationFilter.class)
+
+				// custom Token based authentication based on the header previously given to the client
+				.addFilterBefore(new StatelessAuthenticationFilter(tokenAuthenticationService), UsernamePasswordAuthenticationFilter.class);
+	}
+	
+	@Bean
+	@Override
+	public AuthenticationManager authenticationManagerBean() throws Exception {
+		return super.authenticationManagerBean();
+	}
+
+	@Override
+	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
+		auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());
+	}
+
+	@Override
+	protected UserDetailsService userDetailsService() {
+		return userDetailsService;
+	}
+}
